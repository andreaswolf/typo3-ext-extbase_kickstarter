{
	"title":"Thanis",
	"namespace":"http://b3mn.org/stencilset/b3mn#",
	"description":"The stencil set for the Thanis wiki.",
 	"stencils" : [
 		{
			"type":"node",
			"id":"Process",
			"title":"Process",
			"groups":["Process"],
			"description":"",
			"view":"node.task.svg",
			"icon":"new_task.png",
			"roles": [],
			"serialize":function(shape, data) {
				// Add the children
				shape.getChildShapes(false).each(function(child){
					data.push({name: 'child', prefix: 'raziel', value: "#" + child.resourceId.replace(/#/g, ""), type: 'resource'});
				});
				
				return data;
			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"length":undefined,
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"process_model",
					"readonly":true,
					"optional":false
				}
			]
		},
 		{
			"type": "node",
			"id":"Activity",
			"title":"Activity",
			"groups":["Flow Objects"],
			"description":"An atomic activity.",
			"view":"node.task.svg",
			"icon":"new_task.png",
			"roles": ["SFSource", "SFTarget", "ActSrc", "ActTgt", "PoolChild", "ProcessChild", "TimerIncomings"],
			"serialize":function(shape, data) {
				var dataobjects = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#Association") {
						var dockedShape = s.getDockers().first().getDockedShape();
						if(dockedShape && 
						   dockedShape.getStencil().id() ==="http://b3mn.org/stencilset/b3mn#DataObject") {
							dataobjects++;
						}
					}
				});
				
				data.push({name:"dataobjects",
						   prefix:"raziel",
						   value:dataobjects, 
						   type: 'literal'});
				
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="outgoing") {
						var og = shape.getCanvas().getChildShapeByResourceId(triple.value);
						if(og.getStencil().type() === "node") {
							triple.name = "target";
						}
					}
				});
				
				return data;
			},
			"deserialize": function(shape, data) {
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="target") {
						triple.name = "outgoing";
					}
				});
				return data;
			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"t",
					"length":undefined,
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"activity_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"SubProcess",
			"title":"Sub Process",
			"groups":["Flow Objects"],
			"description":"A complex sub process.",
			"view":"node.subprocess.svg",
			"icon":"new_subprocess.png",
			"roles": ["SFSource", "SFTarget", "ActSrc", "ActTgt", "PoolChild", "ProcessChild", "TimerIncomings"],
			"serialize":function(shape, data) {
				var dataobjects = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#Association") {
						var dockedShape = s.getDockers().first().getDockedShape();
						if(dockedShape && 
						   dockedShape.getStencil().id() ==="http://b3mn.org/stencilset/b3mn#DataObject") {
							dataobjects++;
						}
					}
				});
				
				data.push({name:"dataobjects",
						   prefix:"raziel",
						   value:dataobjects, 
						   type: 'literal'});
				
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="outgoing") {
						var og = shape.getCanvas().getChildShapeByResourceId(triple.value);
						if(og.getStencil().type() === "node") {
							triple.name = "target";
						}
					}
				});
				
				return data;
			},
			"deserialize": function(shape, data) {
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="target") {
						triple.name = "outgoing";
					}
				});
				return data;
			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"t",
					"length":undefined,
					"wrapLines":true
				},
				{
					"id":"multiple",
					"prefix":"raziel",
					"type":"Boolean",
					"title":"Is Multiple",
					"value":false,
					"readonly":false,
					"optional":true,
					"refToView":"multiple"
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"subprocess_model",
					"readonly":true,
					"optional":false
				},
				{
					"id":"collection",
					"prefix":"raziel",
					"type":"Url",
					"title":"Resource",
					"readonly":true
				}
			]
		},
		{
			"type": "node",
			"id":"XorSplit",
			"title":"Xor Split Gateway",
			"groups":["Flow Objects"],
			"description":"An exclusive or gateway.",
			"view":"node.gateway.xor.databased.cross.svg",
			"icon":"new_gateway_xor_data.png",
			"roles": ["SFSource", "SFTarget", "PoolChild", "ProcessChild"],
			"serialize":function(shape, data) {
				var incomingNum = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#SequenceFlow") {
						incomingNum++;
					}
				});
				
				data.push({name:"ports",
						   prefix:"raziel",
						   value:incomingNum, 
						   type: 'literal'});
				return data;
			},
			"properties": [
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"xor_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"XorJoin",
			"title":"Xor Join Gateway",
			"groups":["Flow Objects"],
			"description":"An exclusive or gateway.",
			"view":"node.gateway.xor.databased.cross.svg",
			"icon":"new_gateway_xor_data.png",
			"roles": ["SFSource", "SFTarget", "PoolChild", "ProcessChild"],
			"serialize":function(shape, data) {
				var incomingNum = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#SequenceFlow") {
						incomingNum++;
					}
				});
				
				data.push({name:"ports",
						   prefix:"raziel",
						   value:incomingNum,
						   type:'literal'});
				return data;
			},
			"properties": [
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"multimerge_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"And",
			"title":"And Gateway",
			"groups":["Flow Objects"],
			"description":"A parallel gateway.",
			"view":"node.gateway.and.svg",
			"icon":"new_gateway_and.png",
			"roles": ["SFSource", "SFTarget", "Gateway", "PoolChild", "ProcessChild"],
			"serialize":function(shape, data) {
				var incomingNum = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#SequenceFlow") {
						incomingNum++;
					}
				});
				
				data.push({name:"ports",
						   prefix:"raziel",
						   value:incomingNum,
						   type:'literal'});
				return data;
			},
			"properties": [
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"and_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"MultipleInstance",
			"title":"Mutliple Instance",
			"groups":["Flow Objects"],
			"description":"A multiple instance activity.",
			"view":"node.multipleinstance.svg",
			"icon":"new_mi.png",
			"roles": ["SFSource", "SFTarget", "ActSrc", "ActTgt", "PoolChild", "ProcessChild", "TimerIncomings"],
			"serialize":function(shape, data) {
				var dataobjects = 0;
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().id() === "http://b3mn.org/stencilset/b3mn#Association") {
						var dockedShape = s.getDockers().first().getDockedShape();
						if(dockedShape && 
						   dockedShape.getStencil().id() ==="http://b3mn.org/stencilset/b3mn#DataObject") {
							dataobjects++;
						}
					}
				});
				
				data.push({name:"dataobjects",
						   prefix:"raziel",
						   value:dataobjects,
						   type:'literal'});
						   
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="outgoing") {
						var og = shape.getCanvas().getChildShapeByResourceId(triple.value);
						if(og.getStencil().type() === "node") {
							triple.name = "target";
						}
					}
				});
				
				return data;
			},
			"deserialize": function(shape, data) {
				data.each(function(triple) {
					if(triple.prefix==="raziel" && triple.name==="target") {
						triple.name = "outgoing";
					}
				});
				return data;
			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"t",
					"length":undefined,
					"wrapLines":true
				},
				{
					"id":"initial",
					"prefix":"raziel",
					"type":"Integer",
					"title":"Initial",
					"value":"1",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":false,
					"min":0
				},
				{
					"id":"trigger_at",
					"prefix":"raziel",
					"type":"Integer",
					"title":"Trigger at",
					"value":"1",
					"description":"",
					"readonly":false,
					"optional":false,
					"min":0
				},
				{
					"id":"completion_condition",
					"prefix":"raziel",
					"type":"Integer",
					"title":"Completion condition",
					"value":"1",
					"description":"",
					"readonly":false,
					"optional":false,
					"min":0
				},
				{
					"id":"mi_entry",
					"prefix":"raziel",
					"type":"Choice",
					"title":"Entry behavior",
					"value":"AND",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"items": [
						{
							"id":"xorsplit",
							"value":"XOR",
							"tooltip":"",
							"refToView":"xorsplit"
						},
						{
							"id":"andsplit",
							"value":"AND",
							"tooltip":"",
							"refToView":"andsplit"
						}
					]
				},
				{
					"id":"mi_exit",
					"prefix":"raziel",
					"type":"Choice",
					"title":"Exit behavior",
					"value":"AND",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"items": [
						{
							"id":"xorjoin",
							"value":"XOR",
							"tooltip":"",
							"refToView":"xorjoin"
						},
						{
							"id":"andjoin",
							"value":"AND",
							"tooltip":"",
							"refToView":"andjoin"
						}
					]
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"mi_model",
					"readonly":true,
					"optional":false
				},
				{
					"id":"for_each_do",
					"prefix":"raziel",
					"type":"String",
					"title":"For each do",
					"value":"",
					"readonly":false,
					"optional":false
				},
				{
					"id":"each_does",
					"prefix":"raziel",
					"type":"String",
					"title":"Each does",
					"value":"",
					"readonly":false,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"StartEvent",
			"title":"Start event",
			"groups":["Startevents"],
			"description":"An event without incoming edges.",
			"view":"node.event.start.svg",
			"icon":"new_startevent.png",		
			"roles": [
				"SFSource",
				"PoolChild", 
				"ProcessChild"
			],
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"startevent_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"Timer",
			"title":"Intermediate timer event",
			"groups":["Intermediate events"],
			"description":"",
			"view":"node.event.timer.intermediate.svg",
			"icon":"new_timerevent.png",		
			"roles": [
				"SFSource",
				"SFTarget",
				"PoolChild", 
				"ProcessChild",
				"TimerIncomings"
			],
			"serialize":function(shape, data) {
				shape.getIncomingShapes(function(s) {
					if(s.getStencil().type() === "node") {
						data.push({name:"target",
						   		   prefix:"raziel",
						   		   value:s.resourceId,
						   		   type:'resource'});
					}
				});
				
				return data;
			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"timer_model",
					"readonly":true,
					"optional":false
				},
				{
					"id":"deadline",
					"prefix":"raziel",
					"type":"Integer",
					"title":"Deadline",
					"readonly":false,
					"optional":true,
					"min":0
				},
				{
					"id":"timeformat",
					"prefix":"raziel",
					"type":"Choice",
					"title":"Time format",
					"value":"h",
					"readonly":false,
					"optional":false,
					"items": [
						{
							"id":"c1",
							"value":"s"
						},
						{
							"id":"c2",
							"value":"min"
						},
						{
							"id":"c3",
							"value":"h"
						},
						{
							"id":"c4",
							"value":"d"
						},
						{
							"id":"c5",
							"value":"w"
						},
						{
							"id":"c6",
							"value":"m"
						},
						{
							"id":"c7",
							"value":"a"
						}
					]
				}
			]
		},
		{
			"type": "node",
			"id":"EndEvent",
			"title":"End event",
			"groups":["Endevents"],
			"description":"An event without outgoing edges.",
			"view":"node.event.end.svg",
			"icon":"new_event_end.png",
			"roles":[
				"SFTarget",
				"PoolChild",
				"ProcessChild"
			],
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"endevent_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"DataObject",
			"title":"Data Object",
			"description":"A data object",
			"groups":["Artifacts"],
			"view":"node.data.object.svg",
			"icon":"new_data_object.png",
			"roles": [
				"AssSrc",
				"AssTgt",
				"PoolChild",
				"ProcessChild"
			],
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"t",
					"length":undefined,
					"wrapLines":true
				},
				{
					"id":"RequiredForStart",
					"type":"Boolean",
					"title":"Required for start",
					"value":true,
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":false,
				},
				{
					"id":"ProducedAtCompletion",
					"type":"Boolean",
					"title":"Produced at completion",
					"value":true,
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":false,
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"data_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "node",
			"id":"Pool",
			"title":"Pool",
			"description":"A pool",
			"groups":["Swimlanes"],
			"view":"node.pool.svg",
			"icon":"new_pool.png",
			"roles": [
				"PoolChild", "ProcessChild"
			],
			"serialize":function(shape, data) {
				// Add the children
				shape.getChildShapes(false).each(function(child){
					data.push({name: 'child', prefix: 'raziel', value: "#" + child.resourceId.replace(/#/g, ""),type:'resource'});
				});
				return data;
			},
			"layout":function(shape) {		
				var pools = shape.getChildNodes(false).findAll(function(node) {
					return (node.getStencil().id() === "http://b3mn.org/stencilset/b3mn#Pool");
				});
				
				if(pools.length > 0) {
				
					pools = pools.sortBy(function(pool) {
						return pool.bounds.upperLeft().y;
					});
					
					var shapeWidth = shape.bounds.width();
					var shapeHeight = 0;
					var topBound = 0;
					pools.each(function(pool) {
						var ul = pool.bounds.upperLeft();
						var lr = pool.bounds.lowerRight();
						ul.y = shapeHeight;
						lr.y = ul.y + pool.bounds.height();
						shapeHeight += pool.bounds.height();
						ul.x = 30;
						lr.x = shapeWidth;
						pool.bounds.set(ul, lr);
					});
					
					var upl = shape.bounds.upperLeft();
					shape.bounds.set(upl.x, upl.y, shape.bounds.lowerRight().x, upl.y + shapeHeight);
				}
 			},
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"refToView":"title",
					"wrapLines":false
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"pool_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "edge",
			"id":"SequenceFlow",
			"title":"Sequence flow",
			"description":"",
			"groups":["Connecting Objects"],
			"view":"connection.sequenceflow.svg",
			"icon":"new_sequence_flow.png",
			"roles": ["TimerIncomings"],
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"length":""
				},
				{
					"id":"expression",
					"prefix":"raziel",
					"type":"String",
					"title":"Expression",
					"value":"",
					"refToView":"exp",
					"wrapLines":true
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"sequence_model",
					"readonly":true,
					"optional":false
				}
			]
		},
		{
			"type": "edge",
			"id":"Association",
			"title":"Association",
			"description":"",
			"groups":["Connecting Objects"],
			"view":"connection.association.directed.svg",
			"icon":"new_association_unidirectional.png",
			"roles": [],
			"properties": [
				{
					"id":"title",
					"prefix":"raziel",
					"type":"String",
					"title":"Title",
					"value":"",
					"description":"",
					"tooltip":"",
					"readonly":false,
					"optional":true,
					"refToView":"",
					"length":""
				},
				{
					"id":"type",
					"prefix":"raziel",
					"type":"String",
					"title":"Type",
					"value":"association_model",
					"readonly":true,
					"optional":false
				}
			]
		}
	],
	"rules": {
		"connectionRules": [
			{
				"role":"SequenceFlow",
				"connects": [
					{
						"from":"SFSource",
						"to":["SFTarget"]
					}
				]
			},
			{
				"role":"Association",
				"connects": [
					{
						"from":"ActSrc",
						"to":["AssTgt"]
					},
					{
						"from":"AssSrc",
						"to":["ActTgt"]
					}
				]
			},
			{
				"role":"Timer",
				"connects": [
					{
						"from":"Activity",
						"to":"Timer"
					}
				]
			}
		],
		"cardinalityRules":[
			{
				"role":"XorSplit",
				incomingEdges: [
					{
						role:"SequenceFlow",
						maximum:1,
						
					}
				]
			},
			{
				"role":"XorJoin",
				outgoingEdges: [
					{
						role:"SequenceFlow",
						maximum:1,
						
					}
				]
			},
			{
				"role":"Timer",
				"incomingEdges": [
					{
						"role":"TimerIncomings",
						"maximum":1
					}
				],
				"outgoingEdges": [
					{
						"role":"SequenceFlow",
						"maximum":1
					}
				]
			},
			{
				"role":"StartEvent",
				"maximumOccurrence":1
			},
			{
				"role":"EndEvent",
				"maximumOccurrence":1
			}
		],
		"containmentRules": [
			{
				"role":"Pool",
				"contains": [
					"PoolChild"
				]
			},
			{
				"role":"Process",
				"contains": [
					"ProcessChild"
				]
			}
		],
		canConnect: function(args) { 
			if(args.result) {
				if(args.sourceShape && args.sourceStencil.roles().member(args.sourceStencil.namespace() + "Gateway")) {
					if(args.sourceShape.getIncomingShapes().length > 1 &&
						args.sourceShape.getOutgoingShapes().length > 0) {
						args.result = false;
					}
				}
				if(args.targetShape && args.targetStencil.roles().member(args.targetStencil.namespace() + "Gateway")) {
					if(args.targetShape.getOutgoingShapes().length > 1 &&
						args.targetShape.getIncomingShapes().length > 0) {
						args.result = false;
					}
				}
			}
			return args.result; 
		}
	}
}