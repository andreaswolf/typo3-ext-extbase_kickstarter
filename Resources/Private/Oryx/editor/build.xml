<?xml version="1.0" encoding="utf-8"?>
<project name="Oryx Editor">
    <!-- Load additional properties -->
    <property file="build.properties" />
    
    <import file="../buildApps/build.xml" />
    
    <!-- Editor properties *************************************************** -->
    <property name="editor-src-root" value="editor" />
    <property name="editor-src-client" value="${editor-src-root}/client" />
    <property name="editor-src-server" value="${editor-src-root}/server" />
    <property name="editor-build-root" value="${build-dir}/editor" />
	<!-- parses plugin xml-->
	<xmlproperty file="${editor-src-client}/scripts/Plugins/plugins.xml" collapseAttributes="true"/>
    
    <!-- Targets for oryx javascript documentation ****************************************************** -->
    <!--path id="jsdoc.classpath">
        <fileset file="${editor-src-root}/lib/js.jar" />
        <fileset file="jsdoc-toolkit/jsrun.jar" />
        <fileset file="jsdoc-toolkit/jsdoctoolkit-ant-task-1.0.jar" />
    </path>
    <taskdef name="jsdoctoolkit" classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit" classpathref="jsdoc.classpath"/>
    <target name="jsdoc-editor">
        <mkdir dir="doc/editor/client" />
        <jsdoctoolkit jsdochome="jsdoc-toolkit/" template="jsdoc" outputdir="doc/editor/client" inputdir="editor/client/scripts" depth="2">
        </jsdoctoolkit>
    </target-->
    
    <!-- Oryx JavaDoc -->
    <target name="javadoc-editor">
      <mkdir dir="doc/editor/server" />
      <javadoc
        excludepackagenames="org.test.supercsv.mock"
          access="public"
           destdir="doc/editor/server"
           author="true"
           version="true"
           use="true"
           windowtitle="org.Super.CSV.API"
       >

        <fileset dir="${editor-src-server}" defaultexcludes="yes">
            <include name="**/*.java"/>
        </fileset>
      </javadoc>
    </target>
    
    <!-- JsLint task,checking javascript- and stencilset-json-files -->
    <!--taskdef name="jslint"
      classname="net.happygiraffe.jslint.ant.JSLintTask"
      classpath="lib/jslint4java-1.2.1+rhino.jar">
    </taskdef>
    <target name="jslint.check_js">
        <jslint options="browser">
            <formatter type="plain" />
            <formatter type="xml" destfile="jslint.xml" />
            <fileset dir="${editor-src-client}/scripts">
                <include name="**/*.js"/>
            </fileset>
        </jslint>
    </target>
    <target name="jslint.check_json">
        <jslint>
            <formatter type="plain" />
            <fileset dir="${editor-src-root}/data/stencilsets">
                <include name="**/*.json"/>
            </fileset>
        </jslint>
    </target-->
    
    
    <!-- Oryx  targets (oryx.war) ****************************************************** -->
    <target name="build-with-xhtml-test-files-flag">
        <property name="build-with-xhtml-test-files-flag" value="*.xhtml" />
    </target>
    
    <target name="build-with-script-files-flag">
        <property name="build-with-script-files-flag" value="scripts/**" />
    </target>
    
    <target name="clean-editor">
        <delete file="${target-dir}/oryx.war" />
        <delete dir="${editor-build-root}"/>
    </target>
    
    <!--target name='examples' depends='build'>
        
        <copy todir='${editor-build-root}'>
            <fileset file="${editor-src-root}/test/examples/*.xhtml"/>
        </copy>
        <copy todir='${editor-build-root}/css'>
            <fileset dir='${editor-src-client}/css'/>
        </copy>
        <echo>
            Copied example files into build destination
        </echo>
        
    </target-->
    
     <target name='copy-license'>
        
        <copy todir='${editor-build-root}'>
            <fileset file="LICENSE"/>
            <fileset file="LIBRARIES"/>
            <fileset file="VERSION"/>
        </copy>
        <echo>
            Copied license file into build destination
        </echo>
        
    </target>
    
    <target name="build-plugins">
        
        <copy todir='${editor-build-root}' file="${editor-src-client}/scripts/Plugins/plugins.xml">
            
        </copy>
        <echo>
            Copied plugins.xml into build destination
        </echo>
        <copy todir='${editor-build-root}/xslt'>
            <fileset dir="${editor-src-client}/xslt"/>
        </copy>
        <echo>
            Copied XSL stylesheets into build destination
        </echo>
        
    </target>
    
    <target name="build-stencilsets" depends='compile-buildApps'>
        
        <delete failonerror="false">
            <fileset dir="${editor-build-root}/stencilsets/" includes="**/*.json"/>
        </delete>

        <copy todir='${editor-build-root}/stencilsets'>
            <fileset dir="${editor-src-root}/data/stencilsets"/>
        </copy>
        <echo>
            Copied stencilsets into build destination
        </echo>
        
        <java dir="${editor-build-root}" classpath="build/buildApps/bin" classname="org.oryxeditor.buildapps.sscompress.SSCompressor" fork="true"
         failonerror="true">
            <classpath>
                <fileset dir="build/buildApps/lib"/>
            </classpath>
            <arg file="${editor-build-root}/stencilsets"/>
        </java>
        
        <!--<delete>
            <fileset dir="${editor-build-root}/stencilsets/" includes="**/view/**/*.*"/>
        </delete>-->
    </target>
    
   <target name="build-execution">
        
        <copy todir='${editor-build-root}/execution'>
            <fileset dir="${editor-src-root}/data/execution"/>
        </copy>
        <echo>
            Copied execution data into build destination
        </echo>
        
    </target>
    
    <target name="build-server">
        
        <mkdir dir="${editor-build-root}/classes"/>
        
        <copy todir='${editor-build-root}/classes'>
            <fileset dir="${editor-src-root}/etc">
                <include name="*.properties"/>
            </fileset>
            <!-- velocity templates -->
            <fileset dir="${editor-src-server}/src">
                <include name="**/*.*.vm"/>
            </fileset>
        </copy>
        
        <javac srcdir="${editor-src-server}/src" destdir="${editor-build-root}/classes" debug="${java-debug}" >
            <classpath>
                <fileset dir="${editor-src-root}/lib">
                    <include name="*.jar"/>
                    <exclude name="deprecated/**" />
                </fileset>
                <fileset dir="lib">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </javac>

        <!-- directory for user interfaces aggregated by the BPMN2XFormsServlet -->
        <mkdir dir="${editor-build-root}/generated-uis"/>

    </target>
    
    <target name="build-editor-core">
        
        <!--<copy todir='${editor-build-root}' file='${editor-src-client}/scripts/Core/config.js'/>-->
        <concat destfile='${editor-build-root}/oryx.debug.js'>
            <filelist id="coresourcefiles" dir="${editor-src-client}">
                <file name='scripts/utils.js'/>
                <file name='scripts/kickstart.js'/>
				<file name='scripts/erdfparser.js'/>
				<file name='scripts/datamanager.js'/>
                <file name='scripts/clazz.js'/>
				<file name='scripts/oryx.js'/>
                <file name='scripts/Core/SVG/editpathhandler.js'/>
                <file name='scripts/Core/SVG/minmaxpathhandler.js'/>
                <file name='scripts/Core/SVG/pointspathhandler.js'/>
                <file name='scripts/Core/SVG/svgmarker.js'/>
                <file name='scripts/Core/SVG/svgshape.js'/>
                <file name='scripts/Core/SVG/label.js'/>
                <file name='scripts/Core/Math/math.js'/>
                <file name='scripts/Core/StencilSet/stencil.js'/>
                <file name='scripts/Core/StencilSet/property.js'/>
                <file name='scripts/Core/StencilSet/propertyitem.js'/>
                <file name='scripts/Core/StencilSet/complexpropertyitem.js'/>
                <file name='scripts/Core/StencilSet/rules.js'/>
                <file name='scripts/Core/StencilSet/stencilset.js'/>
                <file name='scripts/Core/StencilSet/stencilsets.js'/>
                <file name='scripts/Core/command.js'/>
                <file name='scripts/Core/bounds.js'/>
                <file name='scripts/Core/uiobject.js'/>
                <file name='scripts/Core/abstractshape.js'/>
                <file name='scripts/Core/canvas.js'/>
                <!--<file name='scripts/Core/apiHandler.js'/>-->
                <file name='scripts/Core/main.js'/>
                <file name='scripts/Core/svgDrag.js'/>
                <file name='scripts/Core/shape.js'/>
                <file name='scripts/Core/Controls/control.js'/>
                <file name='scripts/Core/Controls/docker.js'/>
                <file name='scripts/Core/Controls/magnet.js'/>
                <file name='scripts/Core/node.js'/>
                <file name='scripts/Core/edge.js'/>
            	<file name='scripts/Core/abstractPlugin.js'/>
            	<file name='scripts/Core/abstractLayouter.js'/>
            </filelist>
			<!-- load all sources from plugins defined in the plugins.xml-->
			<filelist dir="${editor-src-client}/scripts/Plugins/" files="${config.plugins.plugin.source}"/>
            <!--<fileset dir="${editor-src-client}/scripts/Plugins" includes="**/*.js"/>-->
        </concat>
        <echo>
            Concatenated source files into oryx.js
        </echo>
        
        <copy todir='${editor-build-root}'>
			<fileset file='${editor-src-client}/scripts/config.js' />
		</copy>
		<echo>
            Copied config file into oryx build destination
		</echo>

        <copy todir='${editor-build-root}/lib'>
            <fileset dir='${editor-src-root}/lib' includes='**/*'>
                <exclude name="**/*.jar"/>
                <exclude name="deprecated/**"/>
                <exclude name="sources/**"/>
            </fileset>
        </copy>
        <echo>
            Copied dependencies into library destination
        </echo>
        <copy todir='${editor-build-root}/images'>
            <fileset dir='${editor-src-client}/images' includes='**/*.png'/>
            <fileset dir='${editor-src-client}/images' includes='**/*.gif'/>
            <fileset dir='${editor-src-client}/images' includes='**/*.jpg'/>
        </copy>
        <echo>
            Copied images into oryx build destination
        </echo>
        <copy todir="${editor-build-root}/i18n">
            <fileset dir="${editor-src-root}/data/i18n"/>
        </copy>
        <echo>
            Copied language files into oryx build destination
        </echo>
    </target>

    <!-- generates a file containing the Subversion branch and revision number
         a build was made from, which may come handy for tracking issues -->
    <target name='generate-version-file-editor'>
        <exec executable="svn" dir="${editor-src-root}" output="${editor-build-root}/version.xml" failifexecutionfails="false">
            <arg value="info"/>
            <arg value="--non-interactive"/>
            <arg value="--xml"/>
        </exec>
    </target>
        
    <target name="build" depends="copy-license, build-plugins, build-stencilsets, build-execution, build-editor-core, generate-version-file-editor" />
    
    <target name='compress'>
        
        <tempfile property="compress.temp" suffix=".js" prefix="compressed" destDir="${editor-build-root}"/>
        
        <java dir="${editor-build-root}" jar="${editor-src-root}/Lib/yuicompressor-2.4.2.jar" fork="true"
         failonerror="true" output='${compress.temp}'>
            <arg file='${editor-build-root}/oryx.debug.js'/>
        </java>
        <echo>
            Using ${compress.temp} for compression
        </echo>
        
        <echo>
            Compressing Oryx into build destination
        </echo>
        <concat destfile='${editor-build-root}/oryx.js'>
            <fileset file="LICENSE"/>
            <fileset file="${compress.temp}"/>
        </concat>

        <concat destfile='${editor-build-root}/oryx.all.js'>
            <fileset file="license"/>
			<fileset file="${editor-src-root}/lib/path_parser.js"/>
			<fileset file="${editor-src-root}/data/i18n/translation_en_us.js"/>
			<fileset file="${editor-src-client}/scripts/config.js"/>
            <fileset file="${compress.temp}"/>
        </concat>
		        
        <delete file='${compress.temp}'/>
        
    </target>
    
    <target name="deploy-editor">
        <mkdir dir="${deploymentdir}"/>

		<copy todir="${deploymentdir}">
				<fileset dir="${editor-build-root}/" includes='**/*'/>
        </copy>
        <echo>
			Deployed files to target dir ${target-dir}.
		</echo>
	</target>

    <target name="dist">
        <!--echo>
            Creating web application archive. ${deploy-xhtml}
        </echo>
        <war destfile="${target-dir}/oryx.war" webxml="${editor-src-root}/etc/web.xml">
            
            <lib dir="${editor-src-root}/lib">
                <include name="*.jar"/>
                <include name="*.xsl"/>
                <exclude name="deprecated/**"/>
                <exclude name="sources/**"/>
                <exclude name="servlet-api.jar" />
            </lib>
            
            <lib dir="${editor-src-root}/lib/wsdl2xforms">
                <include name="*.xsl"/>
            </lib>
            
			<lib dir="${editor-src-root}/lib/xsd">
            	<include name="**/*.xsd"/>
            </lib>
			
            <fileset dir="${editor-src-root}/client">           
                <include name="${build-with-script-files-flag}"/>
            </fileset>
            
            <fileset dir="${editor-build-root}">
                <exclude name="classes/**"/>
                <exclude name="*.xhtml"/>
            </fileset>
            
            <fileset dir="${editor-build-root}">
                <include name="${build-with-xhtml-test-files-flag}"/>
            </fileset>
            
            <classes dir="${editor-build-root}/classes"/>
            
            <metainf file="${editor-build-root}/LICENSE"/>
            <metainf file="${editor-build-root}/LIBRARIES"/>
            <metainf file="${editor-build-root}/VERSION"/>
            <metainf file="${editor-src-root}/etc/context.xml"/>
            
            <fileset file="favicon.ico"/>
        </war-->
        
          
    </target>
    
    <target name="build-editor" depends="build, compress, dist"/>
</project>
